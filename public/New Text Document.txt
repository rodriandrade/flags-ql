import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { gql } from "@apollo/client";
import client from "./apollo-client"
import React,{useState, useEffect} from 'react'
import axios from 'axios'
import FlagCard from '../components/FlagCard'
import Inner from '../components/Inner'
import {Grid, Col} from '../components/Grid'
import Tabs from '../components/Tabs'
import CarouselSlider from '../components/CarouselSlider'
import Content from '../components/Content'

export default function Home(props) {

  const [countries, setCountries] = useState(props.countries)
  const [continents, setContinents] = useState('')
  const [selectedContinent, setSelectedContinent] = useState('All countries')
  const [start, setStart] = useState(false)

  const [countriesByContinent, setCountriesByContinent] = useState({
    africa: "",
    asia: "",
    europe: "",
    north_america: "",
    oceania: "",
    south_america: ""
  })

  useEffect(()=>{
    setTimeout(()=>{
      setStart(true)
     },2000)
  },[])
 
  // Effect to fetch continents
  useEffect(() => {
    const getContinents = async () =>{
      const continentsFetch = await axios.get('/api/getContinents')
      setContinents(continentsFetch.data.continents)
    }
    getContinents();
  }, [])

  // Effect to fetch countries
  useEffect(() => {
    const getCountries = async () =>{
      const getAfrica = await axios.get('/api/getCountriesByContinent', {
        params: {
          'continent': 'Africa'
        }
      });
      const getAsia = await axios.get('/api/getCountriesByContinent', {
        params: {
          'continent': 'Asia'
        }
      });
      const getEurope = await axios.get('/api/getCountriesByContinent', {
        params: {
          'continent': 'Europe'
        }
      });
      const getNorthAmerica = await axios.get('/api/getCountriesByContinent', {
        params: {
          'continent': 'North America'
        }
      });
      const getOceania = await axios.get('/api/getCountriesByContinent', {
        params: {
          'continent': 'Oceania'
        }
      });
      const getSouthAmerica = await axios.get('/api/getCountriesByContinent', {
        params: {
          'continent': 'South America'
        }
      });
      setCountriesByContinent({
        africa: getAfrica.data.continent.countries,
        asia: getAsia.data.continent.countries,
        europe: getEurope.data.continent.countries,
        north_america: getNorthAmerica.data.continent.countries,
        oceania: getOceania.data.continent.countries,
        south_america: getSouthAmerica.data.continent.countries,
      })
      
      /*
      if(selectedContinent){
        const continent = selectedContinent;
        console.log(continent)
        if(continent !== "All countries"){
          const getFlags = await axios.get('/api/getCountriesByContinent', {
            params: {
              'continent': continent
            }
          });
          setCountries(getFlags.data.continent.countries)
        } else{
          const getFlags = await axios.get('/api/getAllCountries')
          setCountries(getFlags.data.countries)
        }
      }
      */
     /*
     {start && <Tabs isTop={true} data={continents} setSelectedContinent={setSelectedContinent} selectedContinent={selectedContinent} />}
       {/* {start && <CarouselSlider data={countries} continent={selectedContinent}/>} 
       {start && <Tabs isTop={false} data={continents} /> }
       */
    }
    getCountries();
  }, [selectedContinent])
  
  return (
    <div>
      <Head>
        <title>CountriesQL</title>
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
        {start && <Tabs isTop={true} data={continents} setSelectedContinent={setSelectedContinent} selectedContinent={selectedContinent} />}
        {start && <CarouselSlider data={countriesByContinent} continents={continents} continent={selectedContinent}/>} 
        {start && <Tabs isTop={false} data={continents} /> }
    
    </div>
  )
}

export async function getStaticProps() {
  
  const countries = await client.query({
    query: gql`
      query{
        countries{
          name
          flag
          capital
        }
      }
    `,
  });

  return {
    props: countries.data
 };

}

